# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\W\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# emacs
export EDITOR="emacsclient -t"
alias emacs='emacs --no-window-system'
alias em="emacsclient -t"

# HOST SPECIFIC CONFIGURATION 
 LOCAL_HOME_PATH=~
    if [ "$HOSTNAME" == 'caravaggio' ]; then
        export ROSCONSOLE_CONFIG_FILE=~/.rosconsole.caravaggio.conf
        #source ~/HUM/workspace/devel/setup.bash
    fi
    if [ "$HOSTNAME" == 'heckel' ]; then    
        LOCAL_HOME_PATH=/home/herzog
        ulimit -s unlimited
    fi
    if [ "$HOSTNAME" == 'hieronymus' ]; then    
        LOCAL_HOME_PATH=/home/herzog
        export PATH=$PATH:$LOCAL_HOME_PATH/Applications/emacs/bin
    fi
    if [ "$HOSTNAME" == 'kusama' ]; then    
        LOCAL_HOME_PATH=/home/herzog
	export PATH=$PATH:$LOCAL_HOME_PATH/Applications/emacs/bin
        export LD_LIBRARY_PATH=/usr/xenomai/lib:$LD_LIBRARY_PATH
    fi
    if [ "$HOSTNAME" == 'pechstein' ]; then
        echo 'pechstein'
        LOCAL_HOME_PATH=/home/herzog
        export LD_LIBRARY_PATH=/usr/xenomai/lib:$LD_LIBRARY_PATH
    fi
    if [ "$HOSTNAME" == 'athena-robot' ]; then
        echo 'we are on athena-robot'
        LOCAL_HOME_PATH=/Volumes/athena-robot/herzog_local
        export ROSCONSOLE_CONFIG_FILE=~/.rosconsole.athena-robot.conf
        export LD_LIBRARY_PATH=/usr/xenomai/lib:$LD_LIBRARY_PATH
        #source /home/herzog/HUM/devel/setup.bash
    fi
    if [ "$HOSTNAME" == 'athena' ]; then
        echo 'we are on athena'
        LOCAL_HOME_PATH=/home/herzog
        export LD_LIBRARY_PATH=/usr/xenomai/lib:$LD_LIBRARY_PATH
        # source $LOCAL_HOME_PATH/HUM/workspace/devel/setup.bash
    fi
    if [ "$HOSTNAME" == 'bellini' ]; then
        LOCAL_HOME_PATH=/home/herzog
	export PATH=$PATH:$LOCAL_HOME_PATH/Applications/emacs/bin
    fi
# HOST SPECIFIC CONFIGURATION

# local applications compiled on caravaggio
export PATH=~/bin:$PATH
export PATH=~/unix_workspace/bin:$PATH
export PATH=~/Applications/eclise:$PATH
export PATH=~/Applications/emacs/bin:$PATH

# make it easy to access local path
alias cdlocal='cd $LOCAL_HOME_PATH'
alias cdathena='cd $LOCAL_HOME_PATH/HUM/workspace/src/catkin/robots/athenaUser'
alias cdws='cd $LOCAL_HOME_PATH/HUM/workspace'

# ccache
export CCACHE_DIR=$LOCAL_HOME_PATH/.ccache
if [ -d /usr/lib/ccache ]
then
  export PATH=/usr/lib/ccache:$PATH
  export CCACHE_SLOPPINESS=file_macro,time_macros
fi

# export local python path
export PYTHONPATH=$LOCAL_HOME_PATH/PYTHON:$PYTHONPATH

